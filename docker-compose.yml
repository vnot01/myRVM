version: '3.8' # Versi format file docker-compose

services:
  # Service Aplikasi Laravel (PHP-FPM)
  app:
    build:
      context: . # Konteks build adalah direktori saat ini (root proyek)
      dockerfile: Dockerfile # Menggunakan Dockerfile yang sudah kita buat
      # target: development_php # Jika Anda membuat stage 'development_php' di Dockerfile untuk Xdebug, dll.
    container_name: rvm_app_dev # Nama kontainer (opsional, tapi memudahkan identifikasi)
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html # Mount direktori proyek lokal ke /var/www/html di kontainer
                         # Ini bagus untuk development agar perubahan kode langsung terlihat
                         # Untuk produksi, kode biasanya di-COPY ke image saat build
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/zz-local.ini # File konfigurasi PHP kustom (buat jika perlu)
    environment:
      # Variabel environment bisa diset di sini atau dibaca dari file .env oleh Laravel di kontainer
      # Contoh:
      # PHP_IDE_CONFIG: "serverName=Docker" # Untuk Xdebug jika digunakan
      # XDEBUG_CONFIG: "client_host=host.docker.internal client_port=9003" # Untuk Xdebug
      # XDEBUG_MODE: "debug,develop"
      DB_CONNECTION: ${DB_CONNECTION:-mariadb} # Ambil dari .env host atau default mariadb
      DB_HOST: ${DB_HOST:-db_dev}
      DB_PORT: ${DB_PORT:-3306}
      DB_DATABASE: ${DB_DATABASE:-myrvm_dev}
      DB_USERNAME: ${DB_USERNAME:-rvm_user_dev}
      DB_PASSWORD: ${DB_PASSWORD:-secret_dev}
      # Tambahkan variabel env lain yang dibutuhkan Laravel di runtime
      # seperti AWS_*, FILESYSTEM_DISK, dll. yang sudah kita set di .env.docker-dev
      # Docker Compose akan membaca file .env di root proyek secara default
    depends_on:
      - db_dev # Aplikasi 'app' bergantung pada service 'db_dev'
      # - minio_dev # Akan ditambahkan nanti
      # - redis_dev # Jika menggunakan Redis
    networks:
      - rvm_network_dev # Semua service akan berada di jaringan ini

  # Service Web Server (Nginx)
  web:
    image: nginx:1.25-alpine # Menggunakan image Nginx resmi versi Alpine
    container_name: rvm_web_dev
    restart: unless-stopped
    ports:
      - "8000:80" # Map port 8000 di mesin host Anda ke port 80 di kontainer Nginx
                  # Jadi, Anda akses via http://localhost:8000
    volumes:
      - ./:/var/www/html # Mount direktori proyek (agar Nginx bisa akses folder public)
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf # Mount file konfigurasi Nginx kita
    depends_on:
      - app # Service 'web' bergantung pada service 'app'
    networks:
      - rvm_network_dev

  # Service Database (MariaDB)
  db_dev:
    image: mariadb:10.11 # Gunakan versi MariaDB yang Anda inginkan
    container_name: rvm_db_dev
    restart: unless-stopped
    ports:
      - "33061:3306" # Map port 33061 di host ke port 3306 di kontainer MariaDB
                     # Ini agar tidak konflik jika Anda punya MariaDB lokal di port 3306
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-myrvm_dev}       # Nama database, ambil dari .env host atau default
      MYSQL_USER: ${DB_USERNAME:-rvm_user_dev}       # User database, ambil dari .env host atau default
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret_dev}     # Password user, ambil dari .env host atau default
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootsecret_dev} # Password root MariaDB, ambil dari .env host atau default
    volumes:
      - rvm_db_data_dev:/var/lib/mysql # Volume persisten untuk menyimpan data MariaDB
                                     # 'rvm_db_data_dev' akan dibuat otomatis oleh Docker
    networks:
      - rvm_network_dev

    # Service Database (phpmyadmin)  
  phpmyadmin: # <-- SERVICE BARU UNTUK PHPMYADMIN
    image: phpmyadmin/phpmyadmin:latest
    container_name: rvm_phpmyadmin_dev
    restart: unless-stopped
    ports:
      - "8081:80" # Map port 8081 di host Anda ke port 80 di kontainer phpMyAdmin
    environment:
      PMA_HOST: db_dev        # Nama service MariaDB kita (dari service 'db_dev' di atas)
      PMA_PORT: 3306          # Port internal MariaDB di dalam jaringan Docker
      PMA_USER: root          # User default untuk login ke phpMyAdmin (bisa root atau user lain)
      PMA_PASSWORD: ${DB_ROOT_PASSWORD:-rootsecret_dev} # Password untuk user di atas (ambil dari .env atau default)
      # PMA_ARBITRARY: 1      # Uncomment ini jika Anda ingin bisa memasukkan nama server lain saat login
      UPLOAD_LIMIT: 128M       # Batas upload file SQL (opsional)
    depends_on:
      - db_dev # phpMyAdmin bergantung pada service database
    networks:
      - rvm_network_dev # Semua service akan berada di jaringan ini


  # Service Penyimpanan Objek (MinIO) - AKAN DITAMBAHKAN NANTI
  # minio_dev:
  #   image: minio/minio:latest
  #   container_name: rvm_minio_dev
  #   restart: unless-stopped
  #   ports:
  #     - "9001:9001" # MinIO Console
  #     - "9000:9000" # MinIO API
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin_dev}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin_dev_secret}
  #   volumes:
  #     - rvm_minio_data_dev:/data
  #   command: server /data --console-address ":9001"
  #   networks:
  #     - rvm_network_dev

# Definisi Jaringan Kustom
networks:
  rvm_network_dev:
    driver: bridge # Menggunakan driver bridge standar

# Definisi Volume Persisten
volumes:
  rvm_db_data_dev: # Nama volume untuk data MariaDB
    driver: local
  # rvm_minio_data_dev: # Akan ditambahkan nanti
  #   driver: local