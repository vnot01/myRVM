APP_NAME=LaravelRVM_Docker
APP_ENV=local
APP_KEY=base64:7r8uG+96RfffEAgSTj9kZzeTySoi01qtGmlgPP7g728=
APP_DEBUG=true
APP_URL=http://localhost:8000
# Pastikan VITE_* variables tidak konflik atau sesuai kebutuhan jika Vite dev server
# akan diakses dari luar Docker (biasanya tidak untuk setup ini, Vite build aset statis)
VITE_APP_NAME="${APP_NAME}"
# Jika Vite dev server berjalan di host dan diakses oleh PHP di kontainer,
# VITE_ORIGIN perlu diset ke http://host.docker.internal:5173 atau IP host.
# Namun, untuk build produksi aset, ini tidak relevan.
# Kita akan build aset statis.
# VITE_ORIGIN=http://host.docker.internal:5173 


APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=id_ID
APP_TIME_ZONE=Asia/Jakarta
APP_TIMEZONE=UTC

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_LEVEL=debug

DB_CONNECTION=mariadb
DB_HOST=db_dev # Nama service MariaDB di docker-compose.yml nanti
DB_PORT=3306   # Port internal MariaDB di dalam Docker
DB_DATABASE=myrvm_dev  # Nama database untuk Docker dev (bisa beda dari lokal Anda)
DB_CHARSET=utf8mb4
DB_COLLATION=utf8mb4_unicode_ci
DB_USERNAME=rvm_user_dev  # User database untuk Docker dev
DB_PASSWORD=secret_dev    # Password database untuk Docker dev

SESSION_DRIVER=file       # Untuk dev, 'file' session lebih sederhana
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync   # Untuk dev, 'sync' lebih mudah, tidak perlu worker terpisah

CACHE_STORE=file  # Untuk dev, 'file' cache lebih sederhana daripada Redis
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

# Jika Anda menggunakan Redis nanti untuk cache/session/queue di Docker
# REDIS_HOST=redis_dev
# REDIS_PASSWORD=null
# REDIS_PORT=6379
# REDIS_CLIENT=phpredis

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

FILESYSTEM_DISK=s3
AWS_ACCESS_KEY_ID=minioadmin_dev
AWS_SECRET_ACCESS_KEY=minioadmin_dev_secret
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=rvm-bucket-dev
AWS_ENDPOINT=http://minio_dev:9000  # 'minio_dev' adalah nama service MinIO di docker-compose
AWS_USE_PATH_STYLE_ENDPOINT=true


GITHUB_WEBHOOK_SECRET="base64:ONYMI20YVtgwUZTH7pemEsewHSma8hmCa7pi9gCW+xs="
GOOGLE_API_KEY="AIzaSyDZ0-c-n2iAd9R0LM_r76uEN58YRxh9gq8"
# Pilih salah satu endpoint untuk digunakan, atau definisikan keduanya jika perlu switching
GEMINI_API_ENDPOINT_2_5_flash_preview="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent"
GEMINI_API_ENDPOINT_2_5_pro_preview="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-preview-05-06:generateContent"
GEMINI_API_ENDPOINT_PRO="https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent"
GEMINI_API_ENDPOINT_FLASH="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
GEMINI_API_ENDPOINT_PRO_LATEST="https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent"
GEMINI_API_ENDPOINT_FLASH_LATEST="https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"

GOOGLE_CLIENT_ID=ISI_DARI_ENV_LOKAL_ANDA
GOOGLE_CLIENT_SECRET=ISI_DARI_ENV_LOKAL_ANDA
GOOGLE_REDIRECT_URI_WEB=https://precious-puma-smoothly.ngrok-free.app/auth/google/callback